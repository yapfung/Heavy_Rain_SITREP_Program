#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Dec 23, 2017 10:28:15 AM


import sys
from collections import OrderedDict # Additional customisations

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global rain_onset
    rain_onset = StringVar()
    global heaviest_start
    heaviest_start = StringVar()
    global heaviest_end
    heaviest_end = StringVar()
    global north
    north = StringVar()
    global south
    south = StringVar()
    global east
    east = StringVar()
    global west
    west = StringVar()
    global central
    central = StringVar()
    global many
    many = StringVar()
    global most
    most = StringVar()
    global date
    date = StringVar()
    global past_3_hours
    past_3_hours = StringVar()
    global time_filter
    time_filter = StringVar()
    global filter_start
    filter_start = StringVar()
    global filter_end
    filter_end = StringVar()
    global issue_time
    issue_time = StringVar()
    global criteria_30min
    criteria_30min = StringVar()
    global criteria_60min
    criteria_60min = StringVar()
    global criteria_wind_gusts
    criteria_wind_gusts = StringVar()
    global adhoc_request
    adhoc_request = StringVar()
    global url_daily_rainfall
    url_daily_rainfall = StringVar()
    global url_60min_rainfall
    url_60min_rainfall = StringVar()
    global url_60min_rainfall_past_3hrs
    url_60min_rainfall_past_3hrs = StringVar()
    global url_30min_rainfall
    url_30min_rainfall = StringVar()
    global url_30min_rainfall_past_3hrs
    url_30min_rainfall_past_3hrs = StringVar()
    global url_wind_gusts
    url_wind_gusts = StringVar()
    global path_monthly_statistics
    path_monthly_statistics = StringVar()

    # Additional customisations
    '''Read default initial file and set default values for parameters'''
    import datetime as dt   
    import ConfigParser
    Config = ConfigParser.ConfigParser()
    Config.optionxform = str 
    Config.read('heavy_rain_sitrep_defaults.ini')
    
    global startup_message
    startup_message = StringVar()
    global icon_credit
    icon_credit = StringVar()
    global end_message
    end_message = StringVar()
    global excluded_stations
    excluded_stations = StringVar()
    global cause_selected
    cause_selected = StringVar()
    global cause_options 
    cause_options = OrderedDict()
    for key, val in Config.items('Cause_Options'):
        cause_options[key] = val
    global cause
    cause = StringVar()
    global flood_reports
    flood_reports = StringVar()
    global forecast
    forecast = StringVar()
    global remarks
    remarks = StringVar()
    
    startup_message.set(Config.get('Message', 'startup_message'))
    icon_credit.set(Config.get('Message', 'icon_credit'))
    end_message.set(Config.get('Message', 'end_message'))
    date.set(dt.datetime.now().strftime("%d%m%y"))
    rain_onset.set(dt.datetime.now().strftime("%d%m%y") + ' hhmm')
#    rain_onset.set(Config.get('Rain_Onset', 'rain_onset'))
    heaviest_start.set(dt.datetime.now().strftime("%d%m%y") + ' hhmm')
    heaviest_end.set(dt.datetime.now().strftime("%d%m%y") + ' hhmm')
    north.set(Config.get('Affected_Areas', 'north'))
    south.set(Config.get('Affected_Areas', 'south'))
    east.set(Config.get('Affected_Areas', 'east'))
    west.set(Config.get('Affected_Areas', 'west'))
    central.set(Config.get('Affected_Areas', 'central'))
    many.set(Config.get('Affected_Areas', 'many'))
    most.set(Config.get('Affected_Areas', 'most'))
    #cause = Config.get('Cause', 'cause').split('; ')
    flood_reports.set(Config.get('Flood_Reports', 'flood_reports'))
    forecast.set(Config.get('Forecast', 'forecast'))
    remarks.set(Config.get('Remarks', 'remarks'))
    past_3_hours.set(Config.get('Past_3_Hours', 'past_3_hours'))
    time_filter.set(Config.get('Time_Filter', 'time_filter'))
    if time_filter:
        filter_start.set(Config.get('Time_Filter', 'filter_start'))
        filter_end.set(Config.get('Time_Filter', 'filter_end'))
    issue_time.set((dt.datetime.now()+dt.timedelta(minutes = 10)).strftime("%d%m%y %H%M"))
    excluded_stations.set(Config.get('Excluded_Stations', 'excluded_stations'))
    criteria_60min.set(Config.get('SITREP_Criteria', 'criteria_60min'))
    criteria_30min.set(Config.get('SITREP_Criteria', 'criteria_30min'))
    criteria_wind_gusts.set(Config.get('SITREP_Criteria', 'criteria_wind_gusts'))
    adhoc_request.set(Config.get('Ad-Hoc_Request', 'adhoc_request'))
    url_daily_rainfall.set(Config.get('Url_Path', 'url_daily_rainfall'))
    url_60min_rainfall.set(Config.get('Url_Path', 'url_60min_rainfall')) 
    url_60min_rainfall_past_3hrs.set(Config.get('Url_Path', 'url_60min_rainfall_past_3hrs'))
    url_30min_rainfall.set(Config.get('Url_Path', 'url_30min_rainfall')) 
    url_30min_rainfall_past_3hrs.set(Config.get('Url_Path', 'url_30min_rainfall_past_3hrs'))
    url_wind_gusts.set(Config.get('Url_Path', 'url_wind_gusts'))
    path_monthly_statistics.set(Config.get('Url_Path', 'path_monthly_statistics'))

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import heavy_rain_sitrep_gui
    heavy_rain_sitrep_gui.vp_start_gui()


